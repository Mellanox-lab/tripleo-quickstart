# Summary of the feature set.
# Deploy an Openstack environment with OVS configured in the containerized overcloud
composable_scenario: scenario007-multinode-containers.yaml
validate_template: scenario007-multinode.yaml

network_isolation: false
enable_pacemaker: true
overcloud_ipv6: false
containerized_overcloud: true

containerized_undercloud: >-
  {% if release not in ['newton','ocata','pike','queens'] -%}
  true
  {%- else -%}
  false
  {%- endif -%}

undercloud_templates_path: /usr/share/openstack-tripleo-heat-templates
undercloud_custom_env_files: "{{ working_dir }}/undercloud-parameter-defaults.yaml"
undercloud_cloud_domain: "localdomain"
undercloud_undercloud_hostname: "undercloud.{{ undercloud_cloud_domain }}"
undercloud_resource_registry_args:
  "OS::TripleO::Undercloud::Net::SoftwareConfig": "{{ undercloud_templates_path }}/ci/common/net-config-simple-bridge.yaml"
undercloud_enable_tempest: >-
  {% if release not in ['newton', 'ocata', 'pike', 'queens'] -%}
  true
  {%- else -%}
  false
  {%- endif -%}

# This enables TLS for the undercloud which will also make haproxy bind to the
# configured public-vip and admin-vip.
undercloud_generate_service_certificate: false

# This enables the deployment of the overcloud with SSL.
ssl_overcloud: false

# This featureset is extremely resource intensive, so we disable telemetry
# in order to reduce the overall memory footprint
# This is not required in newton
telemetry_args: >-
   {% if release != 'newton' %}
   -e {{ overcloud_templates_path }}/environments/disable-telemetry.yaml
   {% endif %}

extra_args: >-
  {% if release == 'pike' -%}
  -e {{ overcloud_templates_path }}/environments/services-docker/neutron-ovn.yaml
  {%- elif release in ['queens','rocky'] -%}
  -e {{ overcloud_templates_path }}/environments/services/neutron-ovn-ha.yaml
  {%- else -%}
  -e {{ overcloud_templates_path }}/environments/services/neutron-ovs.yaml
  {%- endif -%}

deployed_server: >-
  {% if release in ['newton','ocata','pike','queens'] -%}
  true
  {%- else -%}
  false
  {%- endif -%}
deploy_steps_ansible_workflow: >-
  {% if release not in ['newton','ocata','pike','queens'] -%}
  true
  {%- else -%}
  false
  {%- endif -%}
config_download_args: >-
  {% if release not in ['newton','ocata','pike','queens'] -%}
  -e {{ working_dir }}/config-download.yaml
  --disable-validations
  --verbose
  {%- endif -%}


# Tempest configuration, keep always at the end of the file
# Run tempest in containers when at least undercloud is containerized
tempest_format: >-
  {% if containerized_undercloud|bool -%}
  container
  {%- else -%}
  packages
  {%- endif -%}

# If `run_tempest` is `true`, run tempests tests, otherwise do not
# run them.
tempest_config: true
test_ping: false
test_white_regex: ''
tempest_whitelist:
  - 'tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_network_basic_ops'
overcloud_container_cli: >-
  {% if release not in ['pike', 'queens', 'rocky', 'stein', 'rocky', 'train'] -%}
  podman
  {%- else -%}
  docker
  {%- endif -%}

# os_tempest setting
# Settings for os_tempest
run_tempest: >-
  {% if release not in ['pike', 'queens', 'rocky', 'stein'] -%}
  false
  {%- else -%}
  true
  {%- endif -%}

use_os_tempest: >-
  {% if release not in ['pike', 'queens', 'rocky', 'stein'] -%}
  true
  {%- else -%}
  false
  {%- endif -%}

# It will create a public network name 'public' using os_tempest
tempest_interface_name: public

# In order to have a public network with external connectivity, we need to use
# flat network type
tempest_public_net_provider_type: flat
tempest_private_net_provider_type: "vlan"
# It is the physical network name through which public network will be created
# having connectivity with external world.
tempest_public_net_physical_name: datacentre

# Setting the tempest_cidr as it is required while creating public subnet from which
# floating IPs gets assigned
tempest_cidr: '192.168.24.0/24'

tempest_private_net_seg_id: ''

tempest_install_method: distro

# Having tempest_network_ping_gateway set to true allows to ping any of the IP from
# router to find out network related issue in the deployment early
tempest_network_ping_gateway: true

# It is the python-tempestconf profile which also consumes tempest-deployer-input file
tempest_tempestconf_profile:
  debug: true
  create: true
  deployer-input: "{{ ansible_user_dir }}/tempest-deployer-input.conf"
  os-cloud: "{{ tempest_cloud_name }}"
  out: "{{ tempest_workspace }}/etc/tempest.conf"
  network-id: "{{ tempest_neutron_public_network_id }}"
  overrides: "{{ tempest_tempest_conf_overrides | default({}) }}"

tempest_test_whitelist: "{{ tempest_whitelist }}"
